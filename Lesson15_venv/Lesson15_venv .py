'''
Создание виртуальной среды проекта
python -m venv my_venv

Активируем виртуальную среду
my_venv\Scripts\activate

Устанавливаем бибилиотеку в окружение проекта, например aiogram
pip install aiogram 

pip freeze - список установленных библиотек

pip freeze > .requirements.txt - заморозить зависимости

pip install -r .requirements.txt - установить список зависимостей в среду своего проекта
-----------------------------------------------------------------------------------------
Устанавливаем virtualenv - инструмент для управления виртуальными средами
pip install virtualenv

Создаем виртуальную среду
virtualenv myenv

Активируем виртуальную среду
myenv\Scripts\activate

получите доступ к общему хранилищу в рамках своей среды
virtualenv --system-site-packages myenv
-------------------------------------------------------------------------------------------

После завершения работы с программой из нее нужно корректно выйти
Выходим из виртуальной среды

my_venv\Scripts\deactivate
------------------------------------------------------------------------------------------
poetry - инструмент для управления виртуальными средами
https://python-poetry.org/docs/#installing-with-the-official-installer
Копируем и выполняем в PowrShell:
(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -

poetry new my_project - создаем новый проект с виртуальной средой, создается файл pyproject.toml
poetry init - инициализируем среду
poetry add requerets - устанавливаем библиотеку
poetry add requerets@2.28.2 - можно указать версию библиотеки для установки
poetry add flask - устанавливаем библиотеку
poetry remove flask - удаляем  библиотеку из окружения и из файла зависимостей
poetry install - устанавливает бибилиотек из  файла зависимостей в проекте
poetry shell - активировать среду
poetry update - обновление библиотек из файла зависимостей
poetry show - выводит список зависимостей
poetry check - выполняет проверку

poetry add --dev pytest - создать отдельную группу виртуальной среды







------------------------------------------------------------------------------------------
Ручная компиляция байткода
import py_compile
 
py_compile.compile("user.py")   # передаем путь к скрипту

Модуль compileall применяется для компиляции всех файлов Python по определенным путям.
Например, скомпилируем все файлы в каталоге C:/python/files

python -m compileall c:\python\files

По умолчанию компилируются даже те файлы, которые содержатся в подкаталогах. Если надо скомпилировать только те файлы, которые располагаются непосредственно в указанно папке, то применяется опция -l

python -m compileall c:\python\files -l
'''
